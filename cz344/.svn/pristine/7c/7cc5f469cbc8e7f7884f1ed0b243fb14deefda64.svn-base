function K = computeK(kernel_type, X, Z, param, param2)
% function K = computeK(kernel_type, X, Z)
% computes a matrix K such that Kij=g(x,z);
% for three different function linear, rbf or polynomial.
%
% Input:
% kernel_type: either 'linear','polynomial','rbf'
% X: n input vectors of dimension d (dxn);
% Z: m input vectors of dimension d (dxn);
% param: kernel parameter (inverse kernel width gamma in case of RBF, degree in case of polynomial)
%
% OUTPUT:
% K : nxm kernel matrix
%
%

if nargin<2,
	Z=X;
end;

switch kernel_type
case 'linear'
  K = X' * Z;
case 'rbf'
  K = exp(-param * l2distance(X, Z));
case 'poly'
  K = (X' * Z + 1).^ param;
case 'laplacian'
  K = exp(-param * l1distance(X, Z));
case 'kmod'
  K = exp(param2 ./ (l2distance(X, Z) + param));
end;


function y = l1distance(X, Z)
    [~,n]=size(X);
    [~,m]=size(Z);
    S = repmat(diag(X' * X),1,m);
    R = repmat(diag(Z' * Z)',n,1);
    G = X' * Z; 
    y = abs(S + R - 2 * G);
